/* The following code was generated by JFlex 1.4.3 on 2/14/15 7:32 PM */

package com.intellij.perlplugin.language;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import static com.intellij.perlplugin.psi.PerlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/14/15 7:32 PM from the specification file
 * <tt>D:/Eli/Develop/GitHub/intellij-perl-plugin/src/com/intellij/perlplugin/language/_PerlLexer.flex</tt>
 */
public class _PerlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int OPERATION = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\13\10\0\1\3\1\2\1\0\1\3\1\1\22\0\1\21\1\33"+
    "\1\25\1\4\1\10\1\12\1\13\1\13\1\15\1\15\1\13\1\34"+
    "\1\32\1\22\1\13\1\13\1\6\1\6\1\6\5\6\1\62\1\6"+
    "\1\27\1\30\1\13\1\24\1\23\1\13\1\11\1\36\1\56\1\37"+
    "\1\43\1\44\1\53\1\52\1\40\1\41\1\5\1\5\1\42\1\54"+
    "\1\47\1\46\1\55\1\5\1\45\1\60\1\50\1\57\1\51\1\63"+
    "\1\61\1\64\1\5\1\0\1\26\1\0\1\35\1\7\1\13\1\5"+
    "\1\20\1\31\1\31\1\31\1\31\1\31\1\5\1\5\1\5\1\31"+
    "\1\31\1\5\1\5\1\31\1\31\1\5\1\31\1\16\1\31\1\17"+
    "\1\5\1\31\1\31\1\5\1\31\1\14\1\0\1\14\1\13\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\4\1\1\5\1\4"+
    "\1\1\1\6\1\1\1\7\2\3\2\0\2\10\1\0"+
    "\1\4\1\0\2\4\1\11\1\12\1\13\1\0\1\14"+
    "\2\0\5\10\1\0\1\10\2\4\3\0\1\4\32\0"+
    "\1\15\1\0\1\16\12\0\1\15\47\0\1\17\26\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247\0\u027c\0\65"+
    "\0\u02b1\0\65\0\u02e6\0\u031b\0\65\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\65\0\65\0\65\0\u027c\0\u027c"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\65\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\2\2\13\1\14\2\6\1\4\1\15"+
    "\1\2\1\16\1\17\2\2\1\20\1\6\4\2\24\6"+
    "\1\2\2\6\67\0\1\4\62\0\1\5\1\21\1\22"+
    "\62\5\5\0\3\6\3\23\3\0\3\6\6\0\1\24"+
    "\1\0\1\6\4\0\27\6\5\0\1\6\10\0\3\6"+
    "\10\0\1\6\4\0\24\6\1\0\2\6\4\0\1\25"+
    "\1\6\1\0\5\25\2\0\3\6\1\0\4\25\1\0"+
    "\2\25\1\6\3\25\1\26\24\6\1\0\2\6\5\0"+
    "\1\6\1\0\1\25\6\0\3\6\1\0\1\25\6\0"+
    "\1\6\2\0\1\25\1\0\24\6\1\0\2\6\5\0"+
    "\1\6\10\0\3\6\10\0\1\6\1\0\1\25\1\0"+
    "\1\27\24\6\1\0\2\6\5\0\2\6\1\30\3\31"+
    "\3\0\1\32\1\33\1\6\6\0\1\24\1\0\1\6"+
    "\4\0\27\6\16\0\3\34\2\0\1\35\5\0\1\34"+
    "\4\0\2\34\5\0\2\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\1\0\2\34\1\0\1\34\24\0\1\36"+
    "\41\0\2\37\1\0\22\37\1\40\37\37\2\0\1\22"+
    "\67\0\1\41\10\0\3\41\10\0\1\41\4\0\24\41"+
    "\1\0\2\41\27\0\1\42\73\0\1\25\1\43\4\25"+
    "\1\44\1\45\1\46\1\25\1\47\1\25\1\0\3\25"+
    "\1\0\1\50\2\25\1\0\1\51\41\0\1\25\31\0"+
    "\1\52\1\6\1\53\3\54\3\0\3\52\6\0\1\24"+
    "\1\0\1\52\4\0\24\52\1\6\2\52\5\0\1\55"+
    "\1\0\4\56\3\0\3\55\10\0\1\55\4\0\24\55"+
    "\1\0\2\55\5\0\2\6\1\30\3\31\3\0\1\32"+
    "\2\6\6\0\1\24\1\0\1\6\4\0\27\6\5\0"+
    "\3\6\3\23\3\0\2\6\1\57\6\0\1\24\1\0"+
    "\1\6\4\0\27\6\5\0\3\41\3\23\3\0\3\41"+
    "\6\0\1\24\1\0\1\41\4\0\27\41\5\0\1\60"+
    "\1\0\4\61\3\0\3\60\10\0\1\60\4\0\24\60"+
    "\1\0\2\60\40\0\1\62\73\0\1\63\61\0\1\64"+
    "\75\0\1\65\45\0\1\66\75\0\1\67\1\70\52\0"+
    "\1\71\2\0\1\72\30\0\3\52\3\54\3\0\3\52"+
    "\6\0\1\24\1\73\1\52\4\0\27\52\5\0\1\52"+
    "\2\6\3\23\3\0\3\52\6\0\1\24\1\0\1\52"+
    "\4\0\24\52\1\6\2\52\5\0\1\55\10\0\3\55"+
    "\10\0\1\55\4\0\24\55\1\0\2\55\5\0\3\55"+
    "\3\54\3\0\3\55\6\0\1\24\1\73\1\55\4\0"+
    "\27\55\5\0\1\74\10\0\3\74\10\0\1\74\4\0"+
    "\24\74\1\0\2\74\5\0\3\6\3\23\3\0\3\6"+
    "\1\75\5\0\1\24\1\0\1\6\4\0\27\6\5\0"+
    "\1\76\2\60\3\77\3\0\3\76\10\0\1\76\4\0"+
    "\24\76\1\60\2\76\5\0\1\60\10\0\3\60\10\0"+
    "\1\60\4\0\24\60\1\0\2\60\41\0\1\100\62\0"+
    "\1\101\34\0\1\102\121\0\1\103\61\0\1\104\64\0"+
    "\1\105\76\0\1\106\56\0\1\107\62\0\1\110\37\0"+
    "\1\111\53\0\3\74\3\56\3\0\3\74\7\0\1\73"+
    "\1\74\4\0\27\74\1\112\3\0\10\112\1\0\4\112"+
    "\1\75\3\0\1\112\1\113\36\112\5\0\3\76\3\77"+
    "\3\0\3\76\6\0\1\24\1\114\1\76\4\0\27\76"+
    "\5\0\1\76\10\0\3\76\10\0\1\76\4\0\24\76"+
    "\1\0\2\76\42\0\1\115\70\0\1\116\61\0\1\117"+
    "\4\0\1\120\63\0\1\25\64\0\1\121\54\0\1\122"+
    "\107\0\1\123\51\0\1\124\61\0\1\125\36\0\1\111"+
    "\13\0\1\126\32\0\1\112\3\0\10\112\1\0\4\112"+
    "\4\0\1\112\1\113\36\112\1\0\1\127\1\112\125\0"+
    "\1\130\64\0\1\131\65\0\1\132\65\0\1\133\67\0"+
    "\1\25\62\0\1\134\60\0\1\135\63\0\1\136\32\0"+
    "\1\137\73\0\1\140\46\0\1\112\1\0\1\112\1\0"+
    "\10\112\1\0\4\112\4\0\1\112\1\113\36\112\7\0"+
    "\1\141\116\0\1\142\101\0\1\143\47\0\1\144\66\0"+
    "\1\145\67\0\1\146\65\0\1\147\75\0\1\150\13\0"+
    "\4\151\3\0\1\140\112\0\1\152\67\0\1\153\74\0"+
    "\1\154\51\0\1\155\64\0\1\25\57\0\1\156\77\0"+
    "\1\157\76\0\1\160\5\0\1\161\1\0\4\162\3\0"+
    "\3\161\10\0\1\161\4\0\24\161\1\0\2\161\45\0"+
    "\1\163\71\0\1\25\64\0\1\164\21\0\1\165\113\0"+
    "\1\166\35\0\1\167\135\0\1\170\11\0\3\161\3\162"+
    "\3\0\3\161\7\0\1\171\1\161\4\0\27\161\5\0"+
    "\1\161\10\0\3\161\10\0\1\161\4\0\24\161\1\0"+
    "\2\161\45\0\1\172\26\0\1\173\131\0\1\174\52\0"+
    "\1\145\100\0\1\175\56\0\1\176\32\0\1\177\114\0"+
    "\1\200\71\0\1\201\47\0\1\202\67\0\1\203\67\0"+
    "\1\204\36\0\1\177\13\0\1\126\77\0\1\205\61\0"+
    "\1\206\103\0\1\207\53\0\1\210\70\0\1\211\17\0"+
    "\1\212\113\0\1\213\104\0\1\214\66\0\1\25\13\0"+
    "\1\215\124\0\1\216\67\0\1\210\71\0\1\217\44\0"+
    "\1\220\63\0\1\221\101\0\1\25\47\0\1\222\76\0"+
    "\1\223\56\0\1\224\63\0\1\225\65\0\1\210\73\0"+
    "\1\145\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7314];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\0\1\11\1\1\1\0\1\1\1\0"+
    "\2\1\3\11\1\0\1\1\2\0\5\1\1\0\3\1"+
    "\3\0\1\1\32\0\1\1\1\0\1\11\12\0\1\1"+
    "\47\0\1\1\26\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _PerlLexer() {
    this((java.io.Reader)null);
  }


  public _PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return LANG_VARIABLE;
          }
        case 16: break;
        case 12: 
          { return VALUE;
          }
        case 17: break;
        case 13: 
          { return SUBROUTINE;
          }
        case 18: break;
        case 14: 
          { return PACKAGE;
          }
        case 19: break;
        case 7: 
          { return LANG_SYNTAX;
          }
        case 20: break;
        case 15: 
          { return ARGUMENTS;
          }
        case 21: break;
        case 6: 
          { return OPERATOR;
          }
        case 22: break;
        case 4: 
          { return ATTRIBUTE;
          }
        case 23: break;
        case 9: 
          { return LANG_FUNCTION;
          }
        case 24: break;
        case 11: 
          { return HASH_KEY;
          }
        case 25: break;
        case 10: 
          { return POINTER;
          }
        case 26: break;
        case 3: 
          { return LINE_COMMENT;
          }
        case 27: break;
        case 2: 
          { return WHITESPACE;
          }
        case 28: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 29: break;
        case 5: 
          { return BRACES;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
